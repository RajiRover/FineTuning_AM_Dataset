# Dataset Preparation using ImageFolder Library

import glob
import cv2
from torch.utils.data import Dataset, DataLoader

class CustomDataset(Dataset):
    def __init__(self, imgs_path, target_img_size):
        self.imgs_path = imgs_path
        print(self.imgs_path)
        self.file_list = glob.glob(self.imgs_path+"*")
        print(self.file_list)
        self.data = []
        class_name = []
        for class_path in self.file_list:
            class_name = class_path.split("/")[-1]
            for img_path in glob.glob(class_path + "/*.tif"):
                self.data.append([img_path, class_name])
#         print(self.data)
        print(len(self.data))
        self.class_map = {self.file_list[0].split("/")[-1] : 0}
        print(self.class_map)
        self.img_dim = (target_img_size, target_img_size)

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        img_path, class_name = self.data[idx]
        # print(class_name)
        img = cv2.imread(img_path)
        # img= np.expand_dims(image, axis=2)
        img = cv2.resize(img, self.img_dim)
        img = img.astype('float32')
        img /= 255
        class_id = self.class_map[class_name]
        img_tensor = torch.from_numpy(img)
        img_tensor = img_tensor.permute(2, 0, 1)
        class_id = torch.tensor([class_id])
        return img_tensor, class_id

if __name__ == "__main__":
    xct_ds = CustomDataset(xct_dataset, xct_img_size)
    xct_dl = DataLoader(xct_ds, batch_size, shuffle=True)

for imgs, labels in xct_dl:
    print("Batch of images has shape: ",imgs.shape)
    print("Batch of labels has shape: ", labels.shape)
